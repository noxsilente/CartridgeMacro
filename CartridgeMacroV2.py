########################################################################################################################
#                   CartridgeMacro V.2                            ***Tkinter Framework version***
#
#    Author: NoxSilente
#    Github: https://github.com/noxsilente/TKCartridgeMacro    --------- GNU V.3 Licence
#    E-Mail: cguiproject@gmail.com
#
#     The purpose of this macro is to simplify the creation of cases for firearms'cartridges
#     Available types are:
#           - Bottleneck (rimless, rimmed, belted)
#           - Straight (rimless, rimmed, belted)
#
#    The user have to give several dimensions for create the final object, after that, the user can modify the sketch
#    if needed.I created this macro by the needing a faster way to make cartridges (maybe I'll add the possibility
#    to create bullets too). This macro is in 'alpha' version,  using the Tkinter library allow to an
#    easier handling of images and created to give the user a better view of in which part of the cartridge
#    the measure is inserted.
#
# I tried to make the script easier using my knowledge --- Cleaned for having less lines of code as possible
# First version: 30/04/2023 (DD/MM/YYYY)
# Parallel system of Qt framework's CartridgeMacro. Use the other one if this gives you problems.
# Version changes:
#   - 0.1 - 0.2 Creation of the first offset
#   - 0.3 Fixing check_list and using conversion method
#   - 0.4 Conjuntion of building process - 0.4.1 Some fixes
#   - 0.5 Fixed 'FreeCAD library not working' - 0.5.1 Fixed 'float value' for Rimmed Straight
#   - 0.6 Fixed check_list in classes and issue with 'sb - lb' constants 
#   - 0.6.1 Minor Fixes
#   - 1.0 Create button will be enabled only when values are grabbed and will be unabled after 
#     the object creation
########################################################################################################################

__Title__ = "TKCartridgeMacro"
__Version__ = "1.0"
__Date__     = "17/06/2023" #DD/MM/YYYY
import tkinter as tk
import tkinter.messagebox, base64, os
from PIL import  ImageTk, Image
#creating constant values
sb = -2.225 #small boxer
lb = -2.665 #large boxer
#: creating a boolean checking if the library is loaded
try:
    print(Part.makeBox)
    FCon = True
except:
    FCon = False
# different lists for handle data
Values, V_list =[],[]
x = 0
prev_Frame = classmethod
check_list=[1,0,0,0,0,0]
cwd =os.getcwd()  #'C:\\Program Files\\FreeCAD 0.20\\bin'
print(cwd)
# check_list 'switches':
#   index   |   used for
#-------------------------------------------------------------------------------
#     0     | Small primer (1), Large primer (2), Rimfire (3)
#-------------------------------------------------------------------------------
#     1     | Boxer (0), Berdan (1) ***** -1 if index 0 == 3
#-------------------------------------------------------------------------------
#     2     |  --- Not used, future applications (?)
#-------------------------------------------------------------------------------
#     3     | Bottleneck (0), Belted (1), Rimmed (2)
#           | Straight (3), Belted (4), Rimmed (5)
#-------------------------------------------------------------------------------
#   4, 5    | --- Not used, future applications (?)
#*******************************************************************************
# Images (byte format). Avoiding storage issues with FreeCAD macros,
# the best way is to convert images to byte (previous), then change working directory
# to another path (using 'os.chdir') and decode byte recreating a temporary
# overwritable image. 
#*******************************************************************************
bottleneck = b'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S398xZHzxfe4Tpw4odLSUknSiBEjzviFv/nNb8xDDz2k/v37q6yszDa3DQh0ADp9DVOSysrKmh3t6et+l6Ts7GxddtllNBw6xV/+8hf/9fFJkyY16hF96623TGZmpiTp97//vR05ciQNRqADaInvGqakM65h7t69W8YY07dvX5OTk6Pbb79dHo+HaZBx1o4dO6b3339fP/nJT0xiYqLKysr8I9wl6Z133tEtt9wiSXr77bftmDFjaDQCHUBbWrqGOXToUFlr7RdffGFfeOEFvfbaa8rIyDhjESMgWG+++aYSExN7uVyuXi+88IJ58MEHtWPHDpuent5ouxUrVvh3xvT09EYLZL311lvcN9yTRQBNAISmtq5hSlJSUpJ++MMf2vvvv99s3bpV1dXVZtq0aQwYRdDmz59/wneXRTDZEMzAZVChSwp++VSpodvxiSeeMKNGjfK/5osvvuBdRURo7Rpmix/oGDrdAAI9xGzZssVWV1fbBQsW2PXr1ys1NdXs2bPH//yOHTs0duxY079/f1VVVVmfb3zjG7yrCGutXcOsr69XYWGh+de//qX6+nodPXpU69ev998HfN1111GdA1EqpLvcA5dPve6668wTTzxhiouLbWxsrJYsWWKOHDmie++915577rm8kwh7paWlSkpKMsOHD9eoUaP04IMPnjGxTO/evTV16lRbWlpqKisr9eGHH2rcuHFavXq1br31VnvhhRfSkECUMtbaU+15QbExeV059euMGTNMUVGRtmzZYq+66ipJ0tGjR5WYmGgkaf/+/TYhIUHf/OY3zbBhw3TbbbfpT3/6k1JSUjRr1iw7btw43lUAaOxEJBV7YRu4xnRpr3hYLp/qW0J1586dGj9+vDZu3Gj79eun8ePHm507d7LXAMCZAd2ePwjTN7lTFBtTKamyva8Lptpvunxq4L22o0ePtvHx8Zo4caLy8/P1wQcfmGHDhnEdERGhs1c3DBfdtQAU+0bU8WZaW06gt62yqz6ETZdPtdbqpptuUllZ2RnbxsfHs8uCYCOo2D/QnIhur5Ducq+vr9f27dvPWD41NjZWCxculCRt3rzZHDt2TBUVFerfvz+jfBHxli5d6r9Nc8CAAeaGG24ws2fPNi+//LLZt29fq69duXKl/7Vr165lEhD0mKKiIv++mJSUZEaNGmXuuusu88wzz5iqqiodP368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'
straight = b''
rim_s = b''
rim_b = b''
s_belted = b''
belted = b''
icon = b'AAABAAEAZHYCAAEAAQDwDgAAFgAAACgAAABkAAAA7AAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuf8AAAAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA///////4AH//////8AAAAP//////AAAH//////AAAAD/////8AAAAH/////wAAAA/////8AAAAAP////8AAAAP////4AAAAAA/////AAAAD////4AAf/AAD////wAAAA////8AD///gAf///8AAAAP///8AH////AB////AAAAD///8AH////+AH///wAAAA///+AH/////4A///8AAAAP///AH//////AH///AAAAD///gH//////8B///wAAAA///wH///////wP//8AAAAP//4D///////+B///AAAAD//4B////////wH//wAAAA//+A////////+B//8AAAAP//Af////4AAHwP//AAAAD//wP////+AAB+B//wAAAA//4H/////gAAfgP/8AAAAP/8D////gAAAD8B//AAAAD//B////4AAAA/gf/wAAAA//g////+AAAAP8D/8AAAAP/wf///8AAAAD/gf/AAAAD/8H////AAAAA/4H/wAAAA/+D////wAAAAP/A/8AAAAP/g////gAH//7/4H/AAAAD/wP///4AB//+/+B/wAAAA/4H///+AAf//v/wP8AAAAP+B///8AH/////+D/AAAAD/g////AB8AAAABgfwAAAA/wP///wAYAAAAAAH8AAAAP8H///gAYAAAAAAB/AAAAD+B///4AEAAAAAAAPwAAAA/g///+AAAAAAAAAD8AAAAP4P///gAAAAAAAAA/AAAAD8D//gAAAAAAAAAAPwAAAA/B/4AAAAAAAAAAAD8AAAAPwfgAAAAAAAAAAAA/AAAAD8HAAAAAAAAAAAAAPwAAAA+CAAAAAOAAAAAAAD8AAAAPgAAB8AfgAAAAAAA/AAAAD4AAP/AH4AAAAAAAPwAAAA+AB//wB+AAAAAAAD8AAAAPgB//8AfgAAAAAAA/AAAADwB///AH4AAAAAAAPwAAAA8B///wB+AAAAAAAD8AAAAOB///8AfgAAAAAAA/AAAADgf///AH4AAAAAAAPwAAAA4H///wB+AAAAAAAD8AAAAOB///8AfgAAAAAAA/AAAADwH///AH4AAAAAAAPwAAAA8Af//wB+AAAAAAAD8AAAAPAB//8AfgAAAAAAA/AAAADwAD//AH4AAAAAAAPwAAAA8AAD/wB+AAAAAAAD8AAAAPBAAA8AfgAAAAAAA/AAAADwcAAAAH4AAAAAAAPwAAAA+D4AAAAAAAAAAAAD8AAAAPg/gAAAAAAAAAAAA/AAAAD4P/gAAAAAAAAAAAPwAAAA+D//4AAAAAAAAAAD8AAAAPg////gAAAAAAAAA/AAAAD4P///4A4AAAAAAAPwAAAA/B///+APAAAAAAAD8AAAAPwf///gD4AAAAAAA/AAAAD8H///4A/AAAAAAEPwAAAA/A///+AP8AAAAAGD8AAAAP4P///gAf//////g/AAAAD+D///4AH//////4PwAAAA/gf//+AB//////8D8AAAAP8H///8AH//////B/AAAAD/A////AB//////gfwAAAA/4P///wAf/////4P8AAAAP+B////gAH//7/+D/AAAAD/gf///4AB//+//A/wAAAA/8D///+AAf//v/gf8AAAAP/g////8AAAAD/4H/AAAAD/4P////AAAAA/8D/wAAAA//B////wAAAAP+B/8AAAAP/wP////gAAAD/gf/AAAAD/+D////4AAAA/wP/wAAAA//wf///+AAAAP4H/8AAAAP/+D/////4AAH8B//AAAAD//gf////+AAB+A//wAAAA//8D/////gAAfgf/8AAAAP//Af////////wP//AAAAD//4D////////4H//wAAAA///Af///////8D//8AAAAP//4D///////+B///AAAAD///AP//////+A///wAAAA///4B///////Af//8AAAAP///AH//////AH///AAAAD///4Af/////AD///wAAAA////gB/////AD///8AAAAP///8AH////AB////AAAAD////wAP//+AB////wAAAA/////AAH/wAA////8AAAAP////4AAAAAA/////AAAAD/////wAAAAB/////wAAAA//////AAAAB/////8AAAAP//////AAAH//////AAAAD///////gA///////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP//////+AB///////AAAAD//////wAAB//////wAAAA//////AAAAB/////8AAAAP/////AAAAAD/////AAAAD////+AAAAAAP////wAAAA////+AAH/wAA////8AAAAP////AA///4AH////AAAAD////AB////wAf///wAAAA////AB/////gB///8AAAAP///gB/////+AP///AAAAD///wB//////wB///wAAAA///4B///////Af//8AAAAP//8B///////8D///AAAAD//+A////////gf//wAAAA//+Af///////8B//8AAAAP//gP////////gf//AAAAD//wH////+AAB8D//wAAAA//8D/////gAAfgf/8AAAAP/+B/////4AAH4D//AAAAD//A////4AAAA/Af/wAAAA//wf///+AAAAP4H/8AAAAP/4P////gAAAD/A//AAAAD/8H////AAAAA/4H/wAAAA//B////wAAAAP+B/8AAAAP/g////8AAAAD/wP/AAAAD/4P///4AB//+/+B/wAAAA/8D///+AAf//v/gf8AAAAP+B////gAH//7/8D/AAAAD/gf///AB//////g/wAAAA/4P///wAfAAAAAYH8AAAAP8D///8AGAAAAAAB/AAAAD/B///4AGAAAAAAAfwAAAA/gf//+ABAAAAAAAD8AAAAP4P///gAAAAAAAAA/AAAAD+D///4AAAAAAAAAPwAAAA/A//4AAAAAAAAAAD8AAAAPwf+AAAAAAAAAAAA/AAAAD8H4AAAAAAAAAAAAPwAAAA/BwAAAAAAAAAAAAD8AAAAPggAAAADgAAAAAAA/AAAAD4AAAfAH4AAAAAAAPwAAAA+AAD/wB+AAAAAAAD8AAAAPgAf/8AfgAAAAAAA/AAAAD4Af//AH4AAAAAAAPwAAAA8Af//wB+AAAAAAAD8AAAAPAf//8AfgAAAAAAA/AAAADgf///AH4AAAAAAAPwAAAA4H///wB+AAAAAAAD8AAAAOB///8AfgAAAAAAA/AAAADgf///AH4AAAAAAAPwAAAA8B///wB+AAAAAAAD8AAAAPAH//8AfgAAAAAAA/AAAADwAf//AH4AAAAAAAPwAAAA8AA//wB+AAAAAAAD8AAAAPAAA/8AfgAAAAAAA/AAAADwQAAPAH4AAAAAAAPwAAAA8HAAAAB+AAAAAAAD8AAAAPg+AAAAAAAAAAAAA/AAAAD4P4AAAAAAAAAAAAPwAAAA+D/4AAAAAAAAAAAD8AAAAPg//+AAAAAAAAAAA/AAAAD4P///4AAAAAAAAAPwAAAA+D///+AOAAAAAAAD8AAAAPwf///gDwAAAAAAA/AAAAD8H///4A+AAAAAAAPwAAAA/B///+APwAAAAABD8AAAAPwP///gD/AAAAABg/AAAAD+D///4AH//////4PwAAAA/g///+AB//////+D8AAAAP4H///gAf//////A/AAAAD/B////AB//////wfwAAAA/wP///wAf/////4H8AAAAP+D///8AH/////+D/AAAAD/gf///4AB//+//g/wAAAA/4H///+AAf//v/wP8AAAAP/A////gAH//7/4H/AAAAD/4P////AAAAA/+B/wAAAA/+D////wAAAAP/A/8AAAAP/wf///8AAAAD/gf/AAAAD/8D////4AAAA/4H/wAAAA//g////+AAAAP8D/8AAAAP/8H////gAAAD+B//AAAAD//g/////+AAB/Af/wAAAA//4H/////gAAfgP/8AAAAP//A/////4AAH4H//AAAAD//wH////////8D//wAAAA//+A////////+B//8AAAAP//wH////////A///AAAAD//+A////////gf//wAAAA///wD///////gP//8AAAAP//+Af//////wH///AAAAD///wB//////wB///wAAAA///+AH/////wA///8AAAAP///4Af////wA////AAAAD////AB////wAf///wAAAA////8AD///gAf///8AAAAP////wAB/8AAP////AAAAD////+AAAAAAP////wAAAA/////8AAAAAf////8AAAAP/////wAAAAf/////AAAAD//////wAAB//////wAAAA///////4AP//////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA'
#creating an external folder where images are stored
os.chdir('C:\\')
try:
    os.mkdir('_temp_FC_imgs')
    os.getcwd()
except:
    pass
#returning to the main folder
os.chdir('..')
os.chdir(cwd)
os.getcwd() # printing the folder
#[FREECAD PART] If there is no document opened, it will be created a new one **********************************************
try:
    _Doc_  =App.getDocument(App.ActiveDocument.Name).Name
    #print(_Doc_)
except:
    App.newDocument('NewDocument')
    _Doc_  =App.getDocument(App.ActiveDocument.Name).Name
# [END FREECAD PART]**************************************************************************************************************
def loadImage(img):
    '''
    Recreated image decoding bynary variable. change directory to a temp folder then return to initial folder 
    :param cwd:
    :param img:
    :return:
    '''
    print(os.getcwd())
    try:
        os.chdir('C:\\')
        os.chdir('_temp_FC_imgs')
        with open('temp.png', 'wb') as f:
            f.write(base64.b64decode((img)))
        Img = Image.open('temp.png')
    except Exception as e:
        tkinter.messagebox.showerror('Error', 'Cannot open!\n\n'+ str(e))
    Img = Img.resize((500, 300), Image.LANCZOS)
    Img = ImageTk.PhotoImage(Img)
    os.chdir('..')
    os.chdir(cwd)
    return Img
# All values taken from build.gettingvalues are rearranged for a proper use of V_list
# recycling the original CartridgeMacro system
#Belted bottleneck cartridge
class Belted():
    def delete(self):
        '''
        Deleting all values inside the entry boxes
        and resetting V_list
        :return:
        '''
        global V_list
        self.d_1.set('')
        self.d_2.set('')
        self.d_3.set('')
        self.d_4.set('')
        self.d_5.set('')
        self.d_6.set('')
        self.d_7.set('')
        self.d_8.set('')
        self.l_1.set('')
        self.l_2.set('')
        self.l_3.set('')
        self.l_4.set('')
        self.l_5.set('')
        self.l_6.set('')
        N.set('')
        V_list=[]
    def build(self, Frame2):
        def gettingValues(vals):
            '''
            Getting values from class
            :param vals:
            :return:
            '''
            global V_list, check_list
            vals.clear()
            vals.append(-float(self.d_1.get())/2 if self.d_1.get()!='' else tkinter.messagebox.showerror('Error', 'Warning on First element'))
            vals.append(-float(self.d_2.get())/2)
            vals.append(-float(self.d_3.get())/2 if self.d_3.get()!=''else -float(self.d_2.get())/2)
            vals.append(-float(self.d_4.get())/2)
            vals.append(-float(self.d_5.get())/2)
            vals.append(-float(self.d_6.get())/2)
            vals.append(-float(self.d_7.get())/2)
            vals.append(-float(self.d_8.get())/2)
            vals.append(float(self.l_1.get()))
            vals.append(float(self.l_2.get()))
            vals.append(float(self.l_3.get()))
            vals.append(float(self.l_4.get()))
            vals.append(float(self.l_5.get()))
            vals.append(float(self.l_6.get()))
            vals.append(N.get())
            V_list = [vals[-1], vals[8], vals[9], vals[10], vals[11], vals[12], vals[13],vals[0], vals[1], vals[2],
                      vals[3], vals[4], vals[5], vals[6], vals[7]]
            check_list.pop(3)
            check_list.insert(3,1)
            Create.config(state='active')
        img = loadImage(belted)
        L2 = tk.Label(Frame2, image=img)
        L2.image = img
        L2.pack()
        self.d_1 = tk.StringVar() #bullet
        self.d_2 = tk.StringVar() #neck
        self.d_3 = tk.StringVar() #neck base
        self.d_4 = tk.StringVar() #shoulder
        self.d_5 = tk.StringVar() #base
        self.d_6 = tk.StringVar() #belt
        self.d_7 = tk.StringVar() #rim_internal
        self.d_8 = tk.StringVar() #rim
        self.l_1 = tk.StringVar() #total length
        self.l_2 = tk.StringVar() #0 - neck base
        self.l_3 = tk.StringVar() #0 - shoulder
        self.l_4 = tk.StringVar() #0 - rim
        self.l_5 = tk.StringVar() #internal rim length
        self.l_6 = tk.StringVar() #0 - base
        # ø
        self.V1 = tk.Entry(L2, textvariable=self.d_1, relief=tk.SOLID);self.V2 = tk.Entry(L2, textvariable=self.d_2, relief=tk.SOLID);self.V3 = tk.Entry(L2, textvariable=self.d_3, relief=tk.SOLID)
        self.V4 = tk.Entry(L2, textvariable=self.d_4, relief=tk.SOLID);self.V5 = tk.Entry(L2, textvariable=self.d_5, relief=tk.SOLID);self.V6 = tk.Entry(L2, textvariable=self.d_6, relief=tk.SOLID)
        self.V7 = tk.Entry(L2, textvariable=self.d_7, relief=tk.SOLID); self.V8 = tk.Entry(L2, textvariable=self.d_8, relief=tk.SOLID);self.V_1 = tk.Entry(L2, textvariable=self.l_1, relief=tk.SOLID);self.V_2 = tk.Entry(L2, textvariable=self.l_2, relief=tk.SOLID)
        self.V_3 = tk.Entry(L2, textvariable=self.l_3, relief=tk.SOLID);self.V_4 = tk.Entry(L2, textvariable=self.l_4, relief=tk.SOLID);self.V_5 = tk.Entry(L2, textvariable=self.l_5, relief=tk.SOLID)
        self.V_6 = tk.Entry(L2, textvariable=self.l_6, relief=tk.SOLID)
        self.V1.pack();self.V2.pack();self.V3.pack();self.V4.pack();self.V5.pack();self.V6.pack();self.V7.pack()
        self.V_1.pack();self.V_2.pack();self.V_3.pack();self.V_4.pack();self.V_5.pack();self.V_6.pack()
        self.V1.place(x=470, y=10, width=30, height= 15)
        tk.Label(L2, text='ø', background='#fff').place(x=450, y=10,width=15)
        self.V2.place(x=470, y=30, width=30, height= 15)
        tk.Label(L2, text='H2', background='#fff').place(x=450, y=30,width=15)
        self.V3.place(x=470, y=50, width=30, height= 15)
        tk.Label(L2, text='H1', background='#fff').place(x=450, y=50,width=15)
        self.V4.place(x=470, y=70, width=30, height= 15)
        tk.Label(L2, text='P2', background='#fff').place(x=450, y=70,width=15)
        self.V5.place(x=470, y=90, width=30, height= 15)
        tk.Label(L2, text='P1', background='#fff').place(x=450, y=90,width=15)
        self.V6.place(x=470, y=110, width=30, height= 15)
        tk.Label(L2, text='R3', background='#fff').place(x=450, y=110,width=15)
        self.V7.place(x=470, y=130, width=30, height= 15)
        tk.Label(L2, text='E1', background='#fff').place(x=450, y=130,width=15)
        self.V8.place(x=470, y=150, width=30, height= 15)
        tk.Label(L2, text='R1', background='#fff').place(x=450, y=150,width=15)
        self.V_1.place(x=470, y=170, width=30, height= 15)
        tk.Label(L2, text='L3', background='#fff').place(x=450, y=170,width=15)
        self.V_2.place(x=470, y=190, width=30, height= 15)
        tk.Label(L2, text='L2', background='#fff').place(x=450, y=190,width=15)
        self.V_3.place(x=470, y=210, width=30, height= 15)
        tk.Label(L2, text='L1', background='#fff').place(x=450, y=210,width=15)
        self.V_4.place(x=470, y=230, width=30, height= 15)
        tk.Label(L2, text='R', background='#fff').place(x=450, y=230,width=15)
        self.V_5.place(x=470, y=250, width=30, height= 15)
        tk.Label(L2, text='e', background='#fff').place(x=450, y=250,width=15)
        self.V_6.place(x=470, y=270, width=30, height= 15)
        tk.Label(L2, text='E', background='#fff').place(x=450, y=270,width=15)
        L2.grid(row=0,column=0,columnspan=2)
        tk.Button(Frame2, text='OK', background='#005000', foreground='#fff', border='0px', relief=tk.RIDGE,
                         command=lambda: gettingValues(Values)).grid(row=1,column=0, sticky=tk.NSEW)
        tk.Button(Frame2, text='Clear', background='#560000', foreground='#fff', border='0px',relief=tk.SOLID,
                           command=lambda: self.delete()).grid(row=1, column=1, sticky=tk.NSEW)
        return Frame2

#Bottleneck cartridge
class Bottleneck():
    def delete(self):
        '''
        Deleting all values inside the entry boxes
        and resetting V_list
        :return:
        '''
        global V_list
        self.d_1.set('')
        self.d_2.set('')
        self.d_3.set('')
        self.d_4.set('')
        self.d_5.set('')
        self.d_6.set('')
        self.d_7.set('')
        self.l_1.set('')
        self.l_2.set('')
        self.l_3.set('')
        self.l_4.set('')
        self.l_5.set('')
        self.l_6.set('')
        N.set('')
        V_list=[]
    def build(self, Frame2):
        '''
        Creating the frame
        :param Frame2:
        :return:
        '''
        img = loadImage(bottleneck)
        L2 = tk.Label(Frame2, image=img, background='#fff')
        L2.image = img
        Frame2.config(background='#fff')
        def gettingValues(vals):
            '''
            Getting values from class
            :param vals:
            :return:
            '''
            global V_list, check_list
            vals.clear()
            vals.append(-float(self.d_1.get())/2 if self.d_1.get()!='' else tkinter.messagebox.showerror('Error', 'Warning on First element'))
            vals.append(-float(self.d_2.get())/2)
            vals.append(-float(self.d_3.get())/2 if self.d_3.get()!='' else -float(self.d_2.get())/2)
            vals.append(-float(self.d_4.get())/2)
            vals.append(-float(self.d_5.get())/2)
            vals.append(-float(self.d_6.get())/2)
            vals.append(-float(self.d_7.get())/2)
            vals.append(float(self.l_1.get()))
            vals.append(float(self.l_2.get()))
            vals.append(float(self.l_3.get()))
            vals.append(float(self.l_4.get()))
            vals.append(float(self.l_5.get()))
            vals.append(float(self.l_6.get()))
            vals.append(N.get())
            V_list=[vals[-1], vals[7],vals[8],vals[9],vals[10],vals[11], vals[12], vals[0],vals[1],vals[2],vals[3],vals[6],vals[5],vals[4]]
            check_list.pop(3)
            check_list.insert(3,0)       
            Create.config(state='active')

        self.d_1 = tk.StringVar() #bullet
        self.d_2 = tk.StringVar() #neck
        self.d_3 = tk.StringVar() #neck base
        self.d_4 = tk.StringVar() #shoulder
        self.d_5 = tk.StringVar() #rim
        self.d_6 = tk.StringVar() #rim_internal
        self.d_7 = tk.StringVar() #base
        self.l_1 = tk.StringVar() #total length
        self.l_2 = tk.StringVar() #0 - neck base
        self.l_3 = tk.StringVar() #0 - shoulder
        self.l_4 = tk.StringVar() #0 - rim
        self.l_5 = tk.StringVar() #internal rim length
        self.l_6 = tk.StringVar() #0 - base
        self.V1 = tk.Entry(L2, textvariable=self.d_1, relief=tk.SOLID);self.V2 = tk.Entry(L2, textvariable=self.d_2, relief=tk.SOLID);self.V3 = tk.Entry(L2, textvariable=self.d_3, relief=tk.SOLID)
        self.V4 = tk.Entry(L2, textvariable=self.d_4, relief=tk.SOLID);self.V5 = tk.Entry(L2, textvariable=self.d_5, relief=tk.SOLID);self.V6 = tk.Entry(L2, textvariable=self.d_6, relief=tk.SOLID)
        self.V7 = tk.Entry(L2, textvariable=self.d_7, relief=tk.SOLID);self.V_1 = tk.Entry(L2, textvariable=self.l_1, relief=tk.SOLID);self.V_2 = tk.Entry(L2, textvariable=self.l_2, relief=tk.SOLID)
        self.V_3 = tk.Entry(L2, textvariable=self.l_3, relief=tk.SOLID);self.V_4 = tk.Entry(L2, textvariable=self.l_4, relief=tk.SOLID);self.V_5 = tk.Entry(L2, textvariable=self.l_5, relief=tk.SOLID)
        self.V_6 = tk.Entry(L2, textvariable=self.l_6, relief=tk.SOLID)
        self.V1.pack();self.V2.pack();self.V3.pack();self.V4.pack();self.V5.pack();self.V6.pack();self.V7.pack()
        self.V_1.pack();self.V_2.pack();self.V_3.pack();self.V_4.pack();self.V_5.pack();self.V_6.pack()
        self.V1.place(x=470, y=10, width=30, height= 15)
        tk.Label(L2, text='D1', background='#fff').place(x=450,y=10, height=15)
        self.V2.place(x=470, y=30, width=30, height= 15)
        tk.Label(L2, text='D2', background='#fff').place(x=450,y=30, height=15)
        self.V3.place(x=470, y=50, width=30, height= 15)
        tk.Label(L2, text='D3', background='#fff').place(x=450,y=50, height=15)
        self.V4.place(x=470, y=70, width=30, height= 15)
        tk.Label(L2, text='D4', background='#fff').place(x=450,y=70, height=15)
        self.V5.place(x=470, y=90, width=30, height= 15)
        tk.Label(L2, text='D5', background='#fff').place(x=450,y=90, height=15)
        self.V6.place(x=470, y=110, width=30, height= 15)
        tk.Label(L2, text='D6', background='#fff').place(x=450,y=110, height=15)
        self.V7.place(x=470, y=130, width=30, height= 15)
        tk.Label(L2, text='D7', background='#fff').place(x=450,y=130, height=15)
        self.V_1.place(x=470, y=150, width=30, height= 15)
        tk.Label(L2, text='L1', background='#fff').place(x=450,y=150, height=15)
        self.V_2.place(x=470, y=170, width=30, height= 15)
        tk.Label(L2, text='L2', background='#fff').place(x=450,y=170, height=15)
        self.V_3.place(x=470, y=190, width=30, height= 15)
        tk.Label(L2, text='L3', background='#fff').place(x=450,y=190, height=15)
        self.V_4.place(x=470, y=210, width=30, height= 15)
        tk.Label(L2, text='L4', background='#fff').place(x=450,y=210, height=15)
        self.V_5.place(x=470, y=230, width=30, height= 15)
        tk.Label(L2, text='L5', background='#fff').place(x=450,y=230, height=15)
        self.V_6.place(x=470, y=250, width=30, height= 15)
        tk.Label(L2, text='L6', background='#fff').place(x=450,y=250, height=15)
        L2.grid(row=0,column=0, columnspan=2)
        tk.Button(Frame2, text='OK', background='#005000', foreground='#fff', border= '1px', relief=tk.SOLID,
                         command=lambda: gettingValues(Values)).grid(row=1,column=0, sticky=tk.NSEW)
        tk.Button(Frame2, text='Clear', background='#560000', foreground='#fff', border='1px',relief=tk.SOLID,
                           command=lambda: self.delete()).grid(row=1, column=1, sticky=tk.NSEW)
        return Frame2

#Straight cartridge
class Straight():
    def delete(self):
        '''
        Deleting all values inside the entry boxes
        and resetting V_list
        :return: 
        '''
        global V_list
        self.d_1.set('')
        self.d_2.set('')
        self.d_3.set('')
        self.d_4.set('')
        self.d_5.set('')
        self.l_1.set('')
        self.l_2.set('')
        self.l_3.set('')
        self.l_4.set('')
        N.set('')
        V_list=[]
    def build(self, Frame2):
        '''
        Creating the frame
        :param Frame2:
        :return:
        '''
        #Frame2.config(background='#fff')
        img = loadImage(straight)
        L2 = tk.Label(Frame2, image=img)
        L2.image = img
        def gettingValues(vals):
            '''
            Getting values from class
            :param vals:
            :return:
            '''
            global V_list, check_list
            vals.clear()
            vals.append(-float(self.d_1.get())/2 if self.d_1.get()!='' else tkinter.messagebox.showerror('Error', 'Warning on First element'))
            vals.append(-float(self.d_2.get())/2)
            vals.append(-float(self.d_3.get())/2)
            vals.append(-float(self.d_4.get())/2)
            vals.append(-float(self.d_5.get())/2)
            vals.append(float(self.l_1.get()))
            vals.append(float(self.l_2.get()))
            vals.append(float(self.l_3.get()))
            vals.append(float(self.l_4.get()))
            vals.append(N.get())
            V_list = [vals[-1], vals[5], vals[6], vals[7], vals[8], vals[0], vals[1], vals[4], vals[3], vals[2]]
            check_list.pop(3)
            check_list.insert(3,3)
            Create.config(state='active')

        self.d_1 = tk.StringVar() #bullet
        self.d_2 = tk.StringVar() #neck
        self.d_3 = tk.StringVar() #rim
        self.d_4 = tk.StringVar() #rim_internal
        self.d_5 = tk.StringVar() #base
        self.l_1 = tk.StringVar() #total length
        self.l_2 = tk.StringVar() #0 - rim
        self.l_3 = tk.StringVar() #internal rim length
        self.l_4 = tk.StringVar() #0 - base
        self.V1 = tk.Entry(L2, textvariable=self.d_1, relief=tk.SOLID);self.V2 = tk.Entry(L2, textvariable=self.d_2, relief=tk.SOLID);self.V3 = tk.Entry(L2, textvariable=self.d_3, relief=tk.SOLID)
        self.V4 = tk.Entry(L2, textvariable=self.d_4, relief=tk.SOLID);self.V5 = tk.Entry(L2, textvariable=self.d_5, relief=tk.SOLID)
        self.V_1 = tk.Entry(L2, textvariable=self.l_1, relief=tk.SOLID);self.V_2 = tk.Entry(L2, textvariable=self.l_2, relief=tk.SOLID)
        self.V_3 = tk.Entry(L2, textvariable=self.l_3, relief=tk.SOLID);self.V_4 = tk.Entry(L2, textvariable=self.l_4, relief=tk.SOLID)
        self.V1.pack();self.V2.pack();self.V3.pack();self.V4.pack();self.V5.pack()
        self.V_1.pack();self.V_2.pack();self.V_3.pack();self.V_4.pack()
        self.V1.place(x=470, y=10, width=30, height= 15)
        tk.Label(L2, text='D1', background='#fff').place(x=450, y=10, width=15)
        self.V2.place(x=470, y=30, width=30, height= 15)
        tk.Label(L2, text='D2', background='#fff').place(x=450, y=30, width=15)
        self.V3.place(x=470, y=50, width=30, height= 15)
        tk.Label(L2, text='D3', background='#fff').place(x=450, y=50, width=15)
        self.V4.place(x=470, y=70, width=30, height= 15)
        tk.Label(L2, text='D4', background='#fff').place(x=450, y=70, width=15)
        self.V5.place(x=470, y=90, width=30, height= 15)
        tk.Label(L2, text='D5', background='#fff').place(x=450, y=90, width=15)
        self.V_1.place(x=470, y=110, width=30, height= 15)
        tk.Label(L2, text='L1', background='#fff').place(x=450, y=110, width=15)
        self.V_2.place(x=470, y=130, width=30, height= 15)
        tk.Label(L2, text='L2', background='#fff').place(x=450, y=130, width=15)
        self.V_3.place(x=470, y=150, width=30, height= 15)
        tk.Label(L2, text='L3', background='#fff').place(x=450, y=150, width=15)
        self.V_4.place(x=470, y=170, width=30, height= 15)
        tk.Label(L2, text='L4', background='#fff').place(x=450, y=170, width=15)
        L2.grid(row=0,column=0,columnspan=2)
        tk.Button(Frame2, text='OK', background='#005000', foreground='#fff', border='0px', relief=tk.SOLID,
                         command=lambda: gettingValues(Values)).grid(row=1,column=0, sticky=tk.NSEW)
        tk.Button(Frame2, text='Clear', background='#560000', foreground='#fff', border='0px',relief=tk.SOLID,
                           command=lambda: self.delete()).grid(row=1, column=1, sticky=tk.NSEW)
        return Frame2

#Belted straight cartridge
class B_Straight():
    def delete(self):
        '''
        Deleting all values inside the entry boxes
        and resetting V_list
        :return:
        '''
        global V_list
        self.d_1.set('')
        self.d_2.set('')
        self.d_3.set('')
        self.d_4.set('')
        self.d_5.set('')
        self.d_6.set('')
        self.l_1.set('')
        self.l_2.set('')
        self.l_3.set('')
        self.l_4.set('')
        N.set('')
        V_list=[]
    def build(self, Frame2):
        '''
        Creating the frame
        :param Frame2:
        :return:
        '''
        #Frame2.config(background='#fff')
        img = loadImage(s_belted)
        L2 = tk.Label(Frame2, image=img)
        L2.image = img
        def gettingValues(vals):
            '''
            Getting values from class
            :param vals:
            :return:
            '''
            global V_list, check_list
            vals.clear()
            vals.append(-float(self.d_1.get())/2 if self.d_1.get()!='' else tkinter.messagebox.showerror('Error', 'Warning on First element'))
            vals.append(-float(self.d_2.get())/2)
            vals.append(-float(self.d_3.get())/2)
            vals.append(-float(self.d_4.get())/2)
            vals.append(-float(self.d_5.get())/2)
            vals.append(-float(self.d_6.get())/2)
            vals.append(float(self.l_1.get()))
            vals.append(float(self.l_2.get()))
            vals.append(float(self.l_3.get()))
            vals.append(float(self.l_4.get()))
            vals.append(N.get())
            V_list = [vals[-1], vals[6], vals[7], vals[8], vals[9], vals[0], vals[1], vals[2], vals[5], vals[4],
                      vals[3]]
            check_list.pop(3)
            check_list.insert(3,4)
            Create.config(state='active')

        self.d_1 = tk.StringVar() #bullet
        self.d_2 = tk.StringVar() #neck
        self.d_3 = tk.StringVar() #base
        self.d_4 = tk.StringVar() #rim
        self.d_5 = tk.StringVar() #rim_internal
        self.d_6 = tk.StringVar() #belt
        self.l_1 = tk.StringVar() #total length
        self.l_2 = tk.StringVar() #0 - rim
        self.l_3 = tk.StringVar() #internal rim length
        self.l_4 = tk.StringVar() #0 - base
        self.V1 = tk.Entry(L2, textvariable=self.d_1, relief=tk.SOLID);self.V2 = tk.Entry(L2, textvariable=self.d_2, relief=tk.SOLID);self.V3 = tk.Entry(L2, textvariable=self.d_3, relief=tk.SOLID)
        self.V4 = tk.Entry(L2, textvariable=self.d_4, relief=tk.SOLID);self.V5 = tk.Entry(L2, textvariable=self.d_5, relief=tk.SOLID);self.V6 = tk.Entry(L2, textvariable=self.d_6, relief=tk.SOLID)
        self.V_1 = tk.Entry(L2, textvariable=self.l_1, relief=tk.SOLID);self.V_2 = tk.Entry(L2, textvariable=self.l_2, relief=tk.SOLID)
        self.V_3 = tk.Entry(L2, textvariable=self.l_3, relief=tk.SOLID);self.V_4 = tk.Entry(L2, textvariable=self.l_4, relief=tk.SOLID)
        self.V1.pack();self.V2.pack();self.V3.pack();self.V4.pack();self.V5.pack()
        self.V_1.pack();self.V_2.pack();self.V_3.pack();self.V_4.pack()
        self.V1.place(x=470, y=10, width=30, height= 15)
        tk.Label(L2, text='D1', background='#fff').place(x=450, y=10, width=15)
        self.V2.place(x=470, y=30, width=30, height= 15)
        tk.Label(L2, text='D2', background='#fff').place(x=450, y=30, width=15)
        self.V3.place(x=470, y=50, width=30, height= 15)
        tk.Label(L2, text='D3', background='#fff').place(x=450, y=50, width=15)
        self.V4.place(x=470, y=70, width=30, height= 15)
        tk.Label(L2, text='D4', background='#fff').place(x=450, y=70, width=15)
        self.V5.place(x=470, y=90, width=30, height= 15)
        tk.Label(L2, text='D5', background='#fff').place(x=450, y=90, width=15)
        self.V6.place(x=470, y=110, width=30, height= 15)
        tk.Label(L2, text='D6', background='#fff').place(x=450, y=110, width=15)
        self.V_1.place(x=470, y=130, width=30, height= 15)
        tk.Label(L2, text='L1', background='#fff').place(x=450, y=130, width=15)
        self.V_2.place(x=470, y=150, width=30, height= 15)
        tk.Label(L2, text='L2', background='#fff').place(x=450, y=150, width=15)
        self.V_3.place(x=470, y=170, width=30, height= 15)
        tk.Label(L2, text='L3', background='#fff').place(x=450, y=170, width=15)
        self.V_4.place(x=470, y=190, width=30, height= 15)
        tk.Label(L2, text='L4', background='#fff').place(x=450, y=190, width=15)
        L2.grid(row=0,column=0,columnspan=2)
        tk.Button(Frame2, text='OK', background='#005000', foreground='#fff', border='0px', relief=tk.SOLID,
                         command=lambda: gettingValues(Values)).grid(row=1,column=0, sticky=tk.NSEW)
        tk.Button(Frame2, text='Clear', background='#560000', foreground='#fff', border='0px',relief=tk.SOLID,
                           command=lambda: self.delete()).grid(row=1, column=1, sticky=tk.NSEW)
        return Frame2

#Rimmed bottleneck cartridge
class Rim_Bottleneck():
    def delete(self):
        '''
        Deleting all values inside the entry boxes
        and resetting V_list
        :return:
        '''
        global V_list
        self.d_1.set('')
        self.d_2.set('')
        self.d_3.set('')
        self.d_4.set('')
        self.d_5.set('')
        self.d_6.set('')
        self.l_1.set('')
        self.l_2.set('')
        self.l_3.set('')
        self.l_4.set('')
        N.set('')
        V_list=[]
    def build(self, Frame2):
        def gettingValues(vals):
            '''
            Getting values from class
            :param vals:
            :return:
            '''
            global V_list, check_list
            vals.clear()
            vals.append(-float(self.d_1.get())/2 if self.d_1.get()!='' else tkinter.messagebox.showerror('Error', 'Warning on First element'))
            vals.append(-float(self.d_2.get())/2)
            vals.append(-float(self.d_3.get())/2 if self.d_3.get()!='' else -float(self.d_2.get())/2)
            vals.append(-float(self.d_4.get())/2)
            vals.append(-float(self.d_5.get())/2)
            vals.append(-float(self.d_6.get())/2)
            vals.append(float(self.l_1.get()))
            vals.append(float(self.l_2.get()))
            vals.append(float(self.l_3.get()))
            vals.append(float(self.l_4.get()))
            vals.append(N.get())
            V_list = [vals[-1], vals[6], vals[7], vals[8], vals[9], vals[0], vals[1], vals[2], vals[3], vals[4],
                      vals[5]]
            check_list.pop(3)
            check_list.insert(3,2)
            Create.config(state='active')

        img = loadImage(rim_b)
        L2 = tk.Label(Frame2, image=img)
        L2.image = img
        L2.pack()
        self.d_1 = tk.StringVar() #bullet
        self.d_2 = tk.StringVar() #neck
        self.d_3 = tk.StringVar() #neck base
        self.d_4 = tk.StringVar() #shoulder
        self.d_5 = tk.StringVar() #base
        self.d_6 = tk.StringVar() #rim
        self.l_1 = tk.StringVar() #total length
        self.l_2 = tk.StringVar() #0 - neck base
        self.l_3 = tk.StringVar() #0 - shoulder
        self.l_4 = tk.StringVar() #0 - rim
        # ø
        self.V1 = tk.Entry(L2, textvariable=self.d_1, relief=tk.SOLID);self.V2 = tk.Entry(L2, textvariable=self.d_2, relief=tk.SOLID);self.V3 = tk.Entry(L2, textvariable=self.d_3, relief=tk.SOLID)
        self.V4 = tk.Entry(L2, textvariable=self.d_4, relief=tk.SOLID);self.V5 = tk.Entry(L2, textvariable=self.d_5, relief=tk.SOLID);self.V6 = tk.Entry(L2, textvariable=self.d_6, relief=tk.SOLID)
        self.V_1 = tk.Entry(L2, textvariable=self.l_1, relief=tk.SOLID);self.V_2 = tk.Entry(L2, textvariable=self.l_2, relief=tk.SOLID)
        self.V_3 = tk.Entry(L2, textvariable=self.l_3, relief=tk.SOLID);self.V_4 = tk.Entry(L2, textvariable=self.l_4, relief=tk.SOLID)
        self.V1.pack();self.V2.pack();self.V3.pack();self.V4.pack();self.V5.pack();self.V6.pack()
        self.V_1.pack();self.V_2.pack();self.V_3.pack();self.V_4.pack()
        self.V1.place(x=470, y=10, width=30, height= 15)
        tk.Label(L2, text='G1', background='#fff').place(x=450, y=10, width=15)
        self.V2.place(x=470, y=30, width=30, height= 15)
        tk.Label(L2, text='H2', background='#fff').place(x=450, y=30, width=15)
        self.V3.place(x=470, y=50, width=30, height= 15)
        tk.Label(L2, text='H1', background='#fff').place(x=450, y=50, width=15)
        self.V4.place(x=470, y=70, width=30, height= 15)
        tk.Label(L2, text='P2', background='#fff').place(x=450, y=70, width=15)
        self.V5.place(x=470, y=90, width=30, height= 15)
        tk.Label(L2, text='P1', background='#fff').place(x=450, y=90, width=15)
        self.V6.place(x=470, y=110, width=30, height= 15)
        tk.Label(L2, text='R1', background='#fff').place(x=450, y=110, width=15)
        self.V_1.place(x=470, y=130, width=30, height= 15)
        tk.Label(L2, text='L3', background='#fff').place(x=450, y=130, width=15)
        self.V_2.place(x=470, y=150, width=30, height= 15)
        tk.Label(L2, text='L2', background='#fff').place(x=450, y=150, width=15)
        self.V_3.place(x=470, y=170, width=30, height= 15)
        tk.Label(L2, text='L1', background='#fff').place(x=450, y=170, width=15)
        self.V_4.place(x=470, y=190, width=30, height= 15)
        tk.Label(L2, text='R', background='#fff').place(x=450, y=190, width=15)
        L2.grid(row=0,column=0,columnspan=2)
        tk.Button(Frame2, text='OK', background='#005000', foreground='#fff', border='0px',relief=tk.RIDGE,
                         command=lambda: gettingValues(Values)).grid(row=1,column=0, sticky=tk.NSEW)
        tk.Button(Frame2, text='Clear', background='#560000', foreground='#fff', border='0px',relief=tk.SOLID,
                           command=lambda: self.delete()).grid(row=1, column=1, sticky=tk.NSEW)
        #Frame2.config(background='#fff')
        return Frame2

#Rimmed straight cartridge
class Rim_Straight():
    def delete(self):
        '''
        Deleting all values inside the entry boxes
        and resetting V_list
        :return:
        '''
        global V_list
        self.d_1.set('')
        self.d_2.set('')
        self.d_3.set('')
        self.d_4.set('')
        self.l_1.set('')
        self.l_2.set('')
        N.set('')
        V_list=[]
    def build(self, Frame2):
        '''
        Creating the frame
        :param Frame2:
        :return:
        '''
        #Frame2.config(background='#fff')
        img = loadImage(rim_s)
        L2 = tk.Label(Frame2, image=img)
        L2.image = img
        def gettingValues(vals):
            '''
            Getting values from class
            :param vals:
            :return:
            '''
            global V_list, check_list
            vals.clear()
            vals.append(-float(self.d_1.get())/2 if self.d_1.get()!='' else tkinter.messagebox.showerror('Error', 'Warning on First element'))
            vals.append(-float(self.d_2.get())/2)
            vals.append(-float(self.d_3.get())/2 if self.d_3.get()!='' else -float(self.d_2.get())/2)
            vals.append(-float(self.d_4.get())/2)
            vals.append(float(self.l_1.get()))
            vals.append(float(self.l_2.get()))
            vals.append(N.get())
            V_list = [vals[-1], vals[4], vals[5], vals[0], vals[1], vals[2], vals[3]]
            check_list.pop(3)
            check_list.insert(3,5)
            Create.config(state='active')

        self.d_1 = tk.StringVar() #bullet
        self.d_2 = tk.StringVar() #neck
        self.d_3 = tk.StringVar() #rim
        self.d_4 = tk.StringVar() #base
        self.l_1 = tk.StringVar() #total length
        self.l_2 = tk.StringVar() #0 - rim
        self.V1 = tk.Entry(L2, textvariable=self.d_1, relief=tk.SOLID);self.V2 = tk.Entry(L2, textvariable=self.d_2, relief=tk.SOLID);self.V3 = tk.Entry(L2, textvariable=self.d_3, relief=tk.SOLID)
        self.V4 = tk.Entry(L2, textvariable=self.d_4, relief=tk.SOLID)
        self.V_1 = tk.Entry(L2, textvariable=self.l_1, relief=tk.SOLID);self.V_2 = tk.Entry(L2, textvariable=self.l_2, relief=tk.SOLID)
        self.V1.pack();self.V2.pack();self.V3.pack();self.V4.pack()
        self.V_1.pack();self.V_2.pack()
        self.V1.place(x=470, y=10, width=30, height= 15)
        tk.Label(L2, text='D1', background='#fff').place(x=450, y=10, width=15)
        self.V2.place(x=470, y=30, width=30, height= 15)
        tk.Label(L2, text='D2', background='#fff').place(x=450, y=30, width=15)
        self.V3.place(x=470, y=50, width=30, height= 15)
        tk.Label(L2, text='D3', background='#fff').place(x=450, y=50, width=15)
        self.V4.place(x=470, y=70, width=30, height= 15)
        tk.Label(L2, text='D4', background='#fff').place(x=450, y=70, width=15)
        self.V_1.place(x=470, y=90, width=30, height= 15)
        tk.Label(L2, text='L1', background='#fff').place(x=450, y=90, width=15)
        self.V_2.place(x=470, y=110, width=30, height= 15)
        tk.Label(L2, text='L2', background='#fff').place(x=450, y=110, width=15)
        L2.grid(row=0,column=0,columnspan=2)
        tk.Button(Frame2, text='OK', background='#005000', foreground='#fff', border='0px', relief=tk.SOLID,
                         command=lambda: gettingValues(Values)).grid(row=1,column=0, sticky=tk.NSEW)
        tk.Button(Frame2, text='Clear', background='#560000', foreground='#fff', border='0px',relief=tk.SOLID,
                           command=lambda: self.delete()).grid(row=1, column=1, sticky=tk.NSEW)
        return Frame2

# creating the window
win = tk.Tk()
win.title('CartridgeMacro V2')
try: # same method of loadimage()
    os.chdir('C:\\')
    os.chdir('_temp_FC_imgs')
    os.getcwd()
    with open('logo.ico', 'wb') as f:
        f.write(base64.b64decode((icon)))
    win.iconbitmap('logo.ico')
    os.chdir('..')
    os.chdir(cwd)
except Exception as e:
    print('Error : '+str(e))
win.config(background='#fff')
Frame = tk.Frame(win,background='#fff')
Frame_ = tk.Frame(win,background='#fff')
# L1 = tk.Label(Frame, text='L1')
Frame2=Bottleneck.build(Bottleneck(), tk.Frame(win))

def build():
    print(check_list)
    Frame2.grid(row=0, column=2, rowspan=10,sticky=tk.NW)

# [FREECAD PART]******************************************************************************************************************
def create_obj():
    global check_list, V_list, x, sb, lb
    ExtGeoList, ExtConstList = [], []
    if FCon == 1:
        pass    
    else: 
        tk.messagebox.showerror('Error', 'FreeCAD library not loaded')
        check_list=[3,-1,0,5,0,0]
        V_list=['Fake', 30.0, 1.0, -5.0,-5.5, -5.5, -6.0] 
    # Automatic conversion mm - inches:
    # If an element length is less than a costant (6) there is an automatic measurements conversion
    print(V_list, FCon, check_list)
    if V_list[1] < 6:
        for i in range(1,len(V_list)):
            V_list[i] = V_list[i]*25.4
        print('Automatic conversion inch - mm')
        print(V_list)
    ints=[str(i) for i in range(10)]
    if (V_list[0][:1]=='.') or (V_list[0][:1] in ints ) or (V_list[0] == '') :  
#    This part will avoid same name issue 
#    used for object and sketch with a temporary list
        if App.ActiveDocument.Label == 'NewDocument':
            pass
        else:
            temp_list = []
            for object in Gui.ActiveDocument.Document.Objects:
                if object.TypeId == 'PartDesign::Body':
                    temp_list.append(str(object.Name))
            if len(temp_list) == 0:
                new_val = 'Body'
            else:
                new_val = temp_list[-1] + str(x)
    else:
        new_val = V_list[0]
    print(new_val)
    try:
        if App.ActiveDocument.Label == 'NewDocument':
            sketch_name= new_val+str(x)
            print(sketch_name)
        else:
            temp_list = []
            for object in Gui.ActiveDocument.Document.Objects:
                if object.TypeId == 'Sketcher::SketchObject':
                    temp_list.append(str(object.Name))
            sketch_name= temp_list[-1]+str(x)
        obj = App.activeDocument().addObject("PartDesign::Body",new_val)
        #Gui.ActiveDocument.ActiveView.getActiveObject('pdbody')
        Gui.activeView().setActiveObject('pdbody',obj)
        Gui.Selection.clearSelection()
        Gui.Selection.addSelection(obj)
        App.ActiveDocument.recompute()
        plane= [o.Label for o in obj.Origin.OriginFeatures if o.Role == 'XZ_Plane'][0]
        App.getDocument(_Doc_).getObject(new_val).newObject('Sketcher::SketchObject',sketch_name)
        App.getDocument(_Doc_).getObject(sketch_name).Support = (App.getDocument(_Doc_).getObject(plane),[''])
        App.getDocument(_Doc_).getObject(sketch_name).MapMode = 'FlatFace'
        ######################## This value fit well for almost all cases
        berdan_constant = Part.ArcOfCircle(Part.Circle(App.Vector(0,2.7,0),App.Vector(0,0,1),1.5),3.141593,4.716321)
        ########################
        App.ActiveDocument.recompute()
    except: # if something goes wrong, the object will be deleted, closing the macro (only if FreeCAD library is not loaded)
        App.getDocument(_Doc_).getObject(new_val).removeObjectsFromDocument()
        App.getDocument(_Doc_).removeObject(new_val)  
        win.destroy()
        #################################### Everything described in this part refers to the others part
#                                                     ****Bottleneck Rimless**** 
    if check_list[3] == 0:        
        if V_list[2]<V_list[3]:  # if is available only neck length and not the length from base to neck base 
            V_list[2]= V_list[1]-V_list[2] # the point is calculated subtracting 'neck length - total length'
        else:
            pass
        k= V_list[8]-V_list[7]
        ExtGeoList = [
        Part.LineSegment(App.Vector(V_list[7], V_list[1]), App.Vector(V_list[8], V_list[1])),
        Part.LineSegment(App.Vector(V_list[8], V_list[1]), App.Vector(V_list[9], V_list[2])),
        Part.LineSegment(App.Vector(V_list[9], V_list[2]), App.Vector(V_list[10], V_list[3])),
        Part.LineSegment(App.Vector(V_list[10], V_list[3]), App.Vector(V_list[11], V_list[6])),
        Part.LineSegment(App.Vector(V_list[11], V_list[6]), App.Vector(V_list[12], (V_list[4]+V_list[5]))),
        Part.LineSegment(App.Vector(V_list[12], (V_list[4]+V_list[5])), App.Vector(V_list[12], V_list[4])),
        Part.LineSegment(App.Vector(V_list[12], V_list[4]), App.Vector(V_list[13], V_list[4])),
        Part.LineSegment(App.Vector(V_list[13], V_list[4]),App.Vector(V_list[13],0))
        ]           
        ExtConstList = [
        Sketcher.Constraint('Horizontal',0), Sketcher.Constraint('Coincident',0,2,1,1),
        Sketcher.Constraint('Coincident',1,2,2,1), Sketcher.Constraint('Coincident',2,2,3,1),
        Sketcher.Constraint('Vertical',5), Sketcher.Constraint('Coincident',3,2,4,1), 
        Sketcher.Constraint('Coincident',4,2,5,1), Sketcher.Constraint('Coincident',5,2,6,1),
        Sketcher.Constraint('Horizontal',6),Sketcher.Constraint('Vertical',7),
        Sketcher.Constraint('Coincident',6,2,7,1), Sketcher.Constraint('Coincident', 7,2,8,1),
        ]
        # if small or large is selected a temporary value get the right constant
        if check_list[0] == 1:    
            a = sb
        elif check_list[0] == 2:
            a = lb
        else: # only if the case is not rimmed, an error will occur, otherwise specific values are created
             App.getDocument(_Doc_).getObject(new_val).removeObjectsFromDocument()
             App.getDocument(_Doc_).removeObject(new_val)
        if check_list[1] == 0:     # if 'Boxer' is selected all values are fixed for internal parts     
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[13], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(-1.5, 2.7), App.Vector(-1.5, V_list[6])))
            ExtGeoList.append(Part.LineSegment(App.Vector(-1.5, V_list[6]), App.Vector(V_list[7], V_list[6])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[7], V_list[6]), App.Vector(V_list[10]-k, V_list[3])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10]-k, V_list[3]), App.Vector(V_list[9]-k, V_list[2])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[9]-k, V_list[2]), App.Vector(V_list[7], V_list[1])))
            ExtConstList.append( Sketcher.Constraint('Coincident',8,2,9,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',9,2,10,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',10,2,11,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',11,2,12,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',12,2,13,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',13,2,14,1))   
            ExtConstList.append(Sketcher.Constraint('Coincident',14,2,15,1))  
            ExtConstList.append(Sketcher.Constraint('Coincident',15,2,0,1))
            ExtConstList.append( Sketcher.Constraint('Horizontal',8))
            ExtConstList.append( Sketcher.Constraint('Vertical',9))
            ExtConstList.append( Sketcher.Constraint('Horizontal',10))
            ExtConstList.append( Sketcher.Constraint('Vertical',11))   
        elif check_list[1] == 1: # same thing with 'Berdan' primer
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[13], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(berdan_constant)
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 1.2), App.Vector(0, V_list[6])))
            ExtGeoList.append(Part.LineSegment(App.Vector(0, V_list[6]), App.Vector(a, V_list[6])))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, V_list[6]), App.Vector(V_list[10]-k, V_list[3]/2)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10]-k, V_list[3]/2),App.Vector(V_list[10]-k, V_list[3])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10]-k, V_list[3]), App.Vector(V_list[9]-k, V_list[2])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[9]-k, V_list[2]), App.Vector(V_list[7], V_list[1])))
            ExtConstList.append( Sketcher.Constraint('Coincident',8,2,9,1))
            ExtConstList.append( Sketcher.Constraint('Coincident',9,2,10,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',10,2,11,1))
            ExtConstList.append( Sketcher.Constraint('Coincident',11,2,12,1))
            ExtConstList.append( Sketcher.Constraint('Coincident',12,2,13,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',13,2,14,1))   
            ExtConstList.append(Sketcher.Constraint('Coincident',14,2,15,1))  
            ExtConstList.append(Sketcher.Constraint('Coincident',15,2,16,1))  
            ExtConstList.append(Sketcher.Constraint('Coincident',16,2,17,1))   
            ExtConstList.append(Sketcher.Constraint('Coincident',17,2,0,1)) 
            ExtConstList.append( Sketcher.Constraint('Horizontal',8))
            ExtConstList.append( Sketcher.Constraint('Vertical',9))
            ExtConstList.append( Sketcher.Constraint('Horizontal',10))
            ExtConstList.append( Sketcher.Constraint('Vertical',12))  
            ExtConstList.append(Sketcher.Constraint('PointOnObject',11,2,-2))  
        # adding values for trimming function, it will create a chamfer to the rim base
        trim_vals = 7,8,(V_list[13], V_list[4]/3), (V_list[12],0)
#                                                     ****Straight Rimless****    
    elif check_list[3] == 3:
        ExtGeoList = [
        Part.LineSegment(App.Vector(V_list[5], V_list[1]), App.Vector(V_list[6], V_list[1])),
        Part.LineSegment(App.Vector(V_list[6], V_list[1]), App.Vector(V_list[7], V_list[4])),
        Part.LineSegment(App.Vector(V_list[7], V_list[4]), App.Vector(V_list[8], (V_list[2]+V_list[3]))),
        Part.LineSegment(App.Vector(V_list[8], (V_list[2]+V_list[3])), App.Vector(V_list[8], V_list[2])),
        Part.LineSegment(App.Vector(V_list[8], V_list[2]), App.Vector(V_list[9], V_list[2])),
        Part.LineSegment(App.Vector(V_list[9], V_list[2]), App.Vector(V_list[9], 0)),
        ]
        ExtConstList = [
        Sketcher.Constraint('Coincident',0,2,1,1), Sketcher.Constraint('Coincident',1,2,2,1), 
        Sketcher.Constraint('Coincident',2,2,3,1), Sketcher.Constraint('Coincident',3,2,4,1),
        Sketcher.Constraint('Coincident',4,2,5,1), Sketcher.Constraint('Horizontal',8),
        Sketcher.Constraint('Horizontal',0), Sketcher.Constraint('Vertical',3),
        Sketcher.Constraint('Horizontal',4), Sketcher.Constraint('Vertical',5)
        ]
        if check_list[0] == 1:    
            a = sb
        elif check_list[0] == 2:
            a = lb
        else:  
             App.getDocument(_Doc_).getObject(new_val).removeObjectsFromDocument()
             App.getDocument(_Doc_).removeObject(new_val)
        if check_list[1] == 0:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[9], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(-1.5, 2.7), App.Vector(-1.5, V_list[4]+1)))
            ExtGeoList.append(Part.LineSegment(App.Vector(-1.5, V_list[4]+1), App.Vector(V_list[6]/2 , V_list[1]/4)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[6]/2 , V_list[1]/4), App.Vector(V_list[5], V_list[1]/2)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[5] , V_list[1]/2), App.Vector(V_list[5], V_list[1])))
            ExtConstList.append(Sketcher.Constraint('Coincident',5,2,6,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',6,2,7,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',7,2,8,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',8,2,9,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',9,2,10,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',11,2,12,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',12,2,0,1))    
            ExtConstList.append( Sketcher.Constraint('Horizontal',6))
            ExtConstList.append( Sketcher.Constraint('Vertical',7))
            #ExtConstList.append( Sketcher.Constraint('Horizontal',8))
            #ExtConstList.append( Sketcher.Constraint('Vertical',9))  
        elif check_list[1] == 1:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[9], 0), App.Vector(a, 0)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0),App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(berdan_constant)
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 1.2), App.Vector(0, V_list[4]+1)))
            ExtGeoList.append(Part.LineSegment(App.Vector(0, V_list[4]+1), App.Vector(a, V_list[4]+1)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, V_list[4]+1), App.Vector(V_list[5] , V_list[1]/4)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[5] , V_list[1]/4), App.Vector(V_list[5], V_list[1])))
            ExtConstList.append(Sketcher.Constraint('Coincident',5,2,6,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',6,2,7,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',7,2,8,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',8,2,9,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',9,2,10,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',11,2,12,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',12,2,13,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',13,2,0,1)) 
            ExtConstList.append(Sketcher.Constraint('PointOnObject',9,2,-2))  
            ExtConstList.append( Sketcher.Constraint('Horizontal',6))
            ExtConstList.append( Sketcher.Constraint('Vertical',7))
            ExtConstList.append( Sketcher.Constraint('Horizontal',8))
            ExtConstList.append( Sketcher.Constraint('Vertical',10))  
            #ExtGeoList.append(Part.LineSegment(App.Vector(V_list[9], 0), App.Vector(0, 0)))
        trim_vals = 5,6,(V_list[9], V_list[2]/3), (V_list[8],0)
#                                                     ****Bottleneck Rimmed****    
    if check_list[3] == 2:        
        if V_list[2]<V_list[3]:
            V_list[2]= V_list[1]-V_list[2]
        else:
            pass
        ExtGeoList = [
        Part.LineSegment(App.Vector(V_list[5], V_list[1]), App.Vector(V_list[6], V_list[1])),
        Part.LineSegment(App.Vector(V_list[6], V_list[1]), App.Vector(V_list[7], V_list[2])),
        Part.LineSegment(App.Vector(V_list[7], V_list[2]), App.Vector(V_list[8], V_list[3])),
        Part.LineSegment(App.Vector(V_list[8], V_list[3]), App.Vector(V_list[9], V_list[4])),
        Part.LineSegment(App.Vector(V_list[9], V_list[4]), App.Vector(V_list[10], V_list[4])),
        Part.LineSegment(App.Vector(V_list[10], V_list[4]), App.Vector(V_list[10], 0)),
        ]           
        ExtConstList = [
        Sketcher.Constraint('Coincident',0,2,1,1), Sketcher.Constraint('Coincident',1,2,2,1), 
        Sketcher.Constraint('Coincident',2,2,3,1), Sketcher.Constraint('Coincident',3,2,4,1), 
        Sketcher.Constraint('Coincident',4,2,5,1),
        Sketcher.Constraint('Horizontal',0), Sketcher.Constraint('Horizontal',4), 
        Sketcher.Constraint('Vertical',5)
        ]
        if check_list[0] == 1:    
            a = sb
        elif check_list[0] == 2:
            a = lb
        else:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10], 0), App.Vector(0, 0)))
            ExtGeoList.append(Part.LineSegment(App.Vector(0,0), App.Vector(0,  V_list[4]/3)))
            ExtGeoList.append(Part.LineSegment(App.Vector(0,V_list[4]/3), App.Vector(V_list[10]-(V_list[10]-V_list[8]),  V_list[4]/3)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10]-(V_list[10]-V_list[8]),V_list[4]/3), App.Vector(V_list[8] - (V_list[7]-V_list[5]), V_list[3])))
            ExtGeoList.append(Part.LineSegment(App.Vector(App.Vector(V_list[8] - (V_list[7]-V_list[5]), V_list[3])), App.Vector(V_list[7]-(V_list[7]-V_list[5]), V_list[2])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[7]-(V_list[7]-V_list[5]), V_list[2]), App.Vector(V_list[5], V_list[1])))
            ExtConstList.append( Sketcher.Constraint('Coincident',5,2,6,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',6,2,7,1))   
            ExtConstList.append( Sketcher.Constraint('Coincident',7,2,8,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',8,2,9,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',9,2,10,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',11,2,0,1))  
            ExtConstList.append( Sketcher.Constraint('Horizontal',6))
            ExtConstList.append( Sketcher.Constraint('Vertical',7))
            ExtConstList.append( Sketcher.Constraint('Horizontal',8))
        if check_list[1] == 0:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector((a/3)*2, 2.7))) 
            ExtGeoList.append(Part.LineSegment(App.Vector((a/3)*2, 2.7), App.Vector((a/3)*2, 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector((a/3)*2, 4.7), App.Vector(V_list[8]-(V_list[7]-V_list[6]), 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[8]-(V_list[7]-V_list[6]), 4.7), App.Vector(V_list[8]-(V_list[7]-V_list[5]), V_list[3])))                
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[8]-(V_list[7]-V_list[5]), V_list[3]), App.Vector(V_list[7]-(V_list[7]-V_list[5]), V_list[2])))                
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[7]-(V_list[7]-V_list[5]), V_list[2]), App.Vector(V_list[5], V_list[1])))                
            ExtConstList.append( Sketcher.Constraint('Coincident',5,2,6,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',6,2,7,1))   
            ExtConstList.append( Sketcher.Constraint('Coincident',7,2,8,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',8,2,9,1)) 
            ExtConstList.append( Sketcher.Constraint('Coincident',9,2,10,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1)) 
            ExtConstList.append( Sketcher.Constraint('Coincident',11,2,12,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',12,2,13,1))     
            ExtConstList.append(Sketcher.Constraint('Coincident',13,2,0,1))   
            ExtConstList.append( Sketcher.Constraint('Horizontal',6))
            ExtConstList.append( Sketcher.Constraint('Vertical',7))
            ExtConstList.append( Sketcher.Constraint('Horizontal',8))
            ExtConstList.append( Sketcher.Constraint('Vertical',9))    
        elif check_list[1] == 1:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7))) 
            ExtGeoList.append(berdan_constant)
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 1.2), App.Vector(0, 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 4.7), App.Vector(a, 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 4.7), App.Vector(V_list[8]-(V_list[7]-V_list[5]), V_list[3]/3)))                
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[8]-(V_list[7]-V_list[5]), V_list[3]/3), App.Vector(V_list[8]-(V_list[7]-V_list[5]), V_list[3])))                
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[8]-(V_list[7]-V_list[5]), V_list[3]), App.Vector(V_list[7]-(V_list[7]-V_list[5]), V_list[2])))    
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[7]-(V_list[7]-V_list[5]), V_list[2]), App.Vector(V_list[5], V_list[1])))                            
            ExtConstList.append( Sketcher.Constraint('Coincident',5,2,6,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',6,2,7,1))   
            ExtConstList.append( Sketcher.Constraint('Coincident',7,2,8,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',8,2,9,1)) 
            ExtConstList.append( Sketcher.Constraint('Coincident',9,2,10,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1)) 
            ExtConstList.append( Sketcher.Constraint('Coincident',11,2,12,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',12,2,13,1))     
            ExtConstList.append(Sketcher.Constraint('Coincident',13,2,14,1))      
            ExtConstList.append(Sketcher.Constraint('Coincident',14,2,15,1))      
            ExtConstList.append(Sketcher.Constraint('Coincident',15,2,0,1))     
            ExtConstList.append(Sketcher.Constraint('PointOnObject',9,2,-2))
            ExtConstList.append( Sketcher.Constraint('Horizontal',6))
            ExtConstList.append( Sketcher.Constraint('Vertical',7))
            ExtConstList.append( Sketcher.Constraint('Horizontal',8))
            ExtConstList.append( Sketcher.Constraint('Vertical',10))                 
        trim_vals = 5,6,(V_list[10], V_list[4]/3), (V_list[9],0)
#                                                     ****Bottleneck Belted****
    if check_list[3] == 1:        
        if V_list[2]<V_list[3]:
            V_list[2]= V_list[1]-V_list[2]
        else:
            pass
        ExtGeoList = [
        Part.LineSegment(App.Vector(V_list[7], V_list[1]), App.Vector(V_list[8], V_list[1])),
        Part.LineSegment(App.Vector(V_list[8], V_list[1]), App.Vector(V_list[9], V_list[2])),
        Part.LineSegment(App.Vector(V_list[9], V_list[2]), App.Vector(V_list[10], V_list[3])),
        Part.LineSegment(App.Vector(V_list[10], V_list[3]), App.Vector(V_list[11], V_list[6])),
        Part.LineSegment(App.Vector(V_list[11], V_list[6]), App.Vector(V_list[12], V_list[6])),
        Part.LineSegment(App.Vector(V_list[12], V_list[6]), App.Vector(V_list[12], V_list[6]-(V_list[6]/3))), #App.Vector(V_list[12], (V_list[6]-V_list[5]-V_list[4])/2))
        Part.LineSegment(App.Vector(V_list[12], V_list[6]-(V_list[6]/3)), App.Vector(V_list[13], V_list[5]+ V_list[4])),
        Part.LineSegment(App.Vector(V_list[13], V_list[5]+ V_list[4]), App.Vector(V_list[13], V_list[4])),
        Part.LineSegment(App.Vector(V_list[13], V_list[4]), App.Vector(V_list[14], V_list[4])),
        Part.LineSegment(App.Vector(V_list[14], V_list[4]), App.Vector(V_list[14], 0))
        ]          
        ExtConstList = [
        Sketcher.Constraint('Coincident',0,2,1,1), Sketcher.Constraint('Coincident',1,2,2,1), 
        Sketcher.Constraint('Coincident',2,2,3,1), Sketcher.Constraint('Coincident',3,2,4,1), 
        Sketcher.Constraint('Coincident',4,2,5,1), Sketcher.Constraint('Coincident',5,2,6,1),
        Sketcher.Constraint('Coincident',6,2,7,1), Sketcher.Constraint('Coincident',7,2,8,1),
        Sketcher.Constraint('Coincident',8,2,9,1),
        Sketcher.Constraint('Horizontal',0), Sketcher.Constraint('Horizontal',4), 
        Sketcher.Constraint('Vertical',5), Sketcher.Constraint('Vertical',7), Sketcher.Constraint('Horizontal',8), 
        Sketcher.Constraint('Vertical',9)
        ]
        if check_list[0] == 1:    
            a = sb
        elif check_list[0] == 2:
            a = lb
        else:
             App.getDocument(_Doc_).getObject(new_val).removeObjectsFromDocument()
             App.getDocument(_Doc_).removeObject(new_val)
        if check_list[1] == 0:
            k = V_list[8] -V_list[7]
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[14], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(-1.5, 2.7), App.Vector(-1.5, V_list[6])))
            ExtGeoList.append(Part.LineSegment(App.Vector(-1.5, V_list[6]), App.Vector(V_list[11]-(V_list[10]-V_list[9]), V_list[6])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[11]-(V_list[10]-V_list[9]), V_list[6]), App.Vector(V_list[10]-k, V_list[3])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10]-k, V_list[3]), App.Vector(V_list[9]-k, V_list[2])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[9]-k, V_list[2]), App.Vector(V_list[7], V_list[1])))               
            ExtConstList.append( Sketcher.Constraint('Coincident',9,2,10,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',11,2,12,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',12,2,13,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',13,2,14,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',14,2,15,1))      
            ExtConstList.append( Sketcher.Constraint('Coincident',15,2,16,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',16,2,17,1))      
            ExtConstList.append( Sketcher.Constraint('Coincident',17,2,0,1))
            ExtConstList.append( Sketcher.Constraint('Horizontal',10))
            ExtConstList.append( Sketcher.Constraint('Vertical',11))
            ExtConstList.append( Sketcher.Constraint('Horizontal',12))
            ExtConstList.append( Sketcher.Constraint('Vertical',13))                   
        elif check_list[1] == 1:
            k = V_list[8] -V_list[7]
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[14], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(berdan_constant)
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 1.2), App.Vector(0, V_list[6])))
            ExtGeoList.append(Part.LineSegment(App.Vector(0, V_list[6]), App.Vector(V_list[12]/2, V_list[6]-(V_list[5]-V_list[4]))))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[12]/2, V_list[6]-(V_list[5]-V_list[4])), App.Vector(V_list[7], V_list[3]/2)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[7], V_list[3]/2), App.Vector(V_list[10]-k, V_list[3]) ))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[11]-(V_list[10]-V_list[9]), V_list[3]/2), App.Vector(V_list[10]-k, V_list[3])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10]-k, V_list[3]), App.Vector(V_list[9]-k, V_list[2])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[9]-k, V_list[2]), App.Vector(V_list[7], V_list[1])))               
            ExtConstList.append( Sketcher.Constraint('Coincident',9,2,10,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',11,2,12,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',12,2,13,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',13,2,14,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',14,2,15,1))      
            ExtConstList.append( Sketcher.Constraint('Coincident',15,2,16,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',16,2,17,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',17,2,18,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',18,2,19,1))      
            ExtConstList.append( Sketcher.Constraint('Coincident',19,2,0,1))        
            ExtConstList.append(Sketcher.Constraint('PointOnObject',13,2,-2))  
            ExtConstList.append( Sketcher.Constraint('Horizontal',10))
            ExtConstList.append( Sketcher.Constraint('Vertical',11))
            ExtConstList.append( Sketcher.Constraint('Horizontal',12))
            ExtConstList.append( Sketcher.Constraint('Vertical',14))  
        trim_vals = 9,10,(V_list[14], V_list[4]/3), (V_list[13],0)
#                                                     ****Straight Belted****
    if check_list[3] == 4:    
        ExtGeoList = [
        Part.LineSegment(App.Vector(V_list[5], V_list[1]), App.Vector(V_list[6], V_list[1])),
        Part.LineSegment(App.Vector(V_list[6], V_list[1]), App.Vector(V_list[7], V_list[4])),
        Part.LineSegment(App.Vector(V_list[7], V_list[4]), App.Vector(V_list[8], V_list[4])),
        Part.LineSegment(App.Vector(V_list[8], V_list[4]), App.Vector(V_list[8], V_list[4]-(V_list[4]/3))),
        Part.LineSegment(App.Vector(V_list[8], V_list[4]-(V_list[4]/3)), App.Vector(V_list[9], V_list[3]+V_list[2])),
        Part.LineSegment(App.Vector(V_list[9], V_list[3]+V_list[2]), App.Vector(V_list[9], V_list[2])),
        Part.LineSegment(App.Vector(V_list[9], V_list[2]), App.Vector(V_list[10], V_list[2])),
        Part.LineSegment(App.Vector(V_list[10], V_list[2]), App.Vector(V_list[10], 0)),
        ]
        ExtConstList = [
        Sketcher.Constraint('Coincident',0,2,1,1), Sketcher.Constraint('Coincident',1,2,2,1), 
        Sketcher.Constraint('Coincident',2,2,3,1), Sketcher.Constraint('Coincident',3,2,4,1), 
        Sketcher.Constraint('Coincident',4,2,5,1), Sketcher.Constraint('Coincident',5,2,6,1), 
        Sketcher.Constraint('Coincident',6,2,7,1), Sketcher.Constraint('Coincident',7,2,8,1), 
        Sketcher.Constraint('Horizontal',0), Sketcher.Constraint('Horizontal',2), 
        Sketcher.Constraint('Vertical',3), Sketcher.Constraint('Vertical',5), 
        Sketcher.Constraint('Horizontal',6), Sketcher.Constraint('Vertical',7)
        ]
        print(check_list[0])
        if check_list[0] == 1:    
            a = sb
        elif check_list[0] == 2:
            a = lb
        else:
             App.getDocument(_Doc_).getObject(new_val).removeObjectsFromDocument()
             App.getDocument(_Doc_).removeObject(new_val)               
        if check_list[1] == 0:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(-1.5, 2.7), App.Vector(-1.5, V_list[4])))
            ExtGeoList.append(Part.LineSegment(App.Vector(-1.5, V_list[4]),  App.Vector(V_list[6]/2, V_list[4])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[6]/2, V_list[4]), App.Vector(V_list[5], V_list[1]/2)))     
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[5], V_list[1]/2), App.Vector(V_list[5], V_list[1])))             
            ExtConstList.append( Sketcher.Constraint('Coincident',8,2,9,1))
            ExtConstList.append( Sketcher.Constraint('Coincident',9,2,10,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',11,2,12,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',12,2,13,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',13,2,14,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',14,2,0,1))  
            ExtConstList.append( Sketcher.Constraint('Horizontal',8))
            ExtConstList.append( Sketcher.Constraint('Vertical',9))
            ExtConstList.append( Sketcher.Constraint('Horizontal',10))
            ExtConstList.append( Sketcher.Constraint('Vertical',11)) 
        elif check_list[1] == 1:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[10], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(berdan_constant)
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 1.2), App.Vector(0, V_list[4])))
            ExtGeoList.append(Part.LineSegment(App.Vector(0, V_list[4]), App.Vector(V_list[8]/2, V_list[4])))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[8]/2, V_list[4]), App.Vector(V_list[5], V_list[1]/2)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[5], V_list[1]/2), App.Vector(V_list[5], V_list[1])))                 
            ExtConstList.append( Sketcher.Constraint('Coincident',8,2,9,1))
            ExtConstList.append( Sketcher.Constraint('Coincident',9,2,10,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',11,2,12,1))    
            ExtConstList.append( Sketcher.Constraint('Coincident',12,2,13,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',13,2,14,1))       
            ExtConstList.append( Sketcher.Constraint('Coincident',14,2,15,1))  
            ExtConstList.append( Sketcher.Constraint('Coincident',15,2,0,1))
            ExtConstList.append(Sketcher.Constraint('PointOnObject',11,2,-2))  
            ExtConstList.append( Sketcher.Constraint('Horizontal',8))
            ExtConstList.append( Sketcher.Constraint('Vertical',9))
            ExtConstList.append( Sketcher.Constraint('Horizontal',10))
            ExtConstList.append( Sketcher.Constraint('Vertical',12))    
            ExtConstList.append( Sketcher.Constraint('Horizontal',13))        
        trim_vals = 7,8,(V_list[10], V_list[2]/3), (V_list[9],0)
#                                                     ****Straigth Rimmed****
    elif check_list[3] == 5:
        ExtGeoList = [
        Part.LineSegment(App.Vector(V_list[3], V_list[1]), App.Vector(V_list[4], V_list[1])),
        Part.LineSegment(App.Vector(V_list[4], V_list[1]), App.Vector(V_list[5], V_list[2])),
        Part.LineSegment(App.Vector(V_list[5], V_list[2]), App.Vector(V_list[6], V_list[2])),
        Part.LineSegment(App.Vector(V_list[6], V_list[2]), App.Vector(V_list[6], 0))
        ]
        ExtConstList = [
        Sketcher.Constraint('Coincident',0,2,1,1), Sketcher.Constraint('Coincident',1,2,2,1), 
        Sketcher.Constraint('Coincident',2,2,3,1),
        Sketcher.Constraint('Horizontal',0), Sketcher.Constraint('Horizontal',2), 
        Sketcher.Constraint('Vertical',3)
        ]
        if check_list[0] == 1:    
            a = sb
        elif check_list[0] == 2:
            a = lb
        else:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[6], 0), App.Vector(0, 0)))
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 0), App.Vector( 0, V_list[2]/2)))
            ExtGeoList.append(Part.LineSegment(App.Vector(0, V_list[2]/2), App.Vector(V_list[3], V_list[2]/2)))   
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[3], V_list[2]/2), App.Vector(V_list[3], V_list[1]))) 
            ExtConstList.append(Sketcher.Constraint('Coincident',3,2,4,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',4,2,5,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',5,2,6,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',6,2,7,1))   
            ExtConstList.append(Sketcher.Constraint('Coincident',7,2,0,1))     
            ExtConstList.append( Sketcher.Constraint('Horizontal',4))
            ExtConstList.append( Sketcher.Constraint('Vertical',5))
            ExtConstList.append( Sketcher.Constraint('Horizontal',6))      
        if check_list[1] == 0:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[6], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector( (a*2)/3, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector((a*2)/3, 2.7), App.Vector((a*2)/3, 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector((a*2)/3, 4.7), App.Vector(V_list[3], 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[3], 4.7), App.Vector(V_list[3], V_list[1])))
            ExtConstList.append(Sketcher.Constraint('Coincident',3,2,4,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',4,2,5,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',5,2,6,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',6,2,7,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',7,2,8,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',8,2,9,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',9,2,0,1)) 
            ExtConstList.append( Sketcher.Constraint('Horizontal',4))
            ExtConstList.append( Sketcher.Constraint('Vertical',5))
            ExtConstList.append( Sketcher.Constraint('Horizontal',6))
            ExtConstList.append( Sketcher.Constraint('Vertical',7))      
        elif check_list[1] == 1:
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[6], 0), App.Vector(a, 0))) 
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 0), App.Vector(a, 2.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(a, 2.7), App.Vector(-1.5, 2.7)))
            ExtGeoList.append(berdan_constant)
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 1.2), App.Vector( 0, 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(0, 4.7), App.Vector((a*2)/3, 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector((a*2)/3, 4.7), App.Vector(V_list[6]/2, 4.7)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[6]/2, 4.7), App.Vector(V_list[3], V_list[1]/2)))
            ExtGeoList.append(Part.LineSegment(App.Vector(V_list[3], V_list[1]/2), App.Vector(V_list[3], V_list[1])))
            ExtConstList.append(Sketcher.Constraint('Coincident',3,2,4,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',4,2,5,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',5,2,6,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',6,2,7,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',7,2,8,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',8,2,9,1))
            ExtConstList.append(Sketcher.Constraint('Coincident',9,2,10,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',10,2,11,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',11,2,12,1)) 
            ExtConstList.append(Sketcher.Constraint('Coincident',12,2,0,1))  
            ExtConstList.append(Sketcher.Constraint('PointOnObject',7,2,-2))
            ExtConstList.append( Sketcher.Constraint('Horizontal',4))
            ExtConstList.append( Sketcher.Constraint('Vertical',5))
            ExtConstList.append( Sketcher.Constraint('Horizontal',6))
            ExtConstList.append( Sketcher.Constraint('Vertical',8))         
        trim_vals = 3,4,(V_list[6], V_list[2]/3), (V_list[5],0)    
    print(V_list)          
    Rev = sketch_name+'_revolution'
    # Creation of the sketch. If missing a value, a messagebox with error will occur.
    try:
        App.getDocument(_Doc_).getObject(sketch_name).addGeometry(ExtGeoList,False)            
        App.getDocument(_Doc_).getObject(sketch_name).addConstraint(ExtConstList)
        try:
            App.getDocument(_Doc_).getObject(sketch_name).addGeometry(Part.LineSegment(App.Vector(trim_vals[2][0],trim_vals[2][1]+.1), App.Vector(trim_vals[3][0]+.1,0)),False)
            App.getDocument(_Doc_).getObject(sketch_name).trim(trim_vals[0], App.Vector(trim_vals[2][0], trim_vals[2][1],0))
            App.getDocument(_Doc_).recompute()
            App.getDocument(_Doc_).getObject(sketch_name).trim(trim_vals[1], App.Vector(trim_vals[3][0], trim_vals[3][1],0))
            App.getDocument(_Doc_).recompute()
        except:
            pass
        App.getDocument(_Doc_).getObject(new_val).newObject('PartDesign::Revolution',Rev)
        App.ActiveDocument.recompute()
        FreeCAD.ActiveDocument.recompute()  
    except Exception as e:
        tk.messagebox.showerror('Error while creating sketch, control data!\n\n', str(e))
    # Creating 3D object with revolution of the sketch
    try:
        FreeCAD.getDocument(_Doc_).getObject(Rev).Profile = FreeCAD.getDocument(_Doc_).getObject(sketch_name)
        App.getDocument(_Doc_).getObject(Rev).ReferenceAxis = (App.getDocument(_Doc_).getObject(sketch_name),['V_Axis'])
        App.getDocument(_Doc_).getObject(Rev).Angle =360.0
        App.getDocument(_Doc_).getObject(sketch_name).Visibility = False
        #App.ActiveDocument.recompute()
        App.getDocument(_Doc_).getObject(Rev).ViewObject.ShapeColor=getattr(App.getDocument(_Doc_).getObject(new_val).getLinkedObject(True).ViewObject,'ShapeColor',App.getDocument(_Doc_).getObject(Rev).ViewObject.ShapeColor)
        App.getDocument(_Doc_).getObject(Rev).ViewObject.LineColor=getattr(App.getDocument(_Doc_).getObject(new_val).getLinkedObject(True).ViewObject,'LineColor',App.getDocument(_Doc_).getObject(Rev).ViewObject.LineColor)
        App.getDocument(_Doc_).getObject(Rev).ViewObject.PointColor=getattr(App.getDocument(_Doc_).getObject(new_val).getLinkedObject(True).ViewObject,'PointColor',App.getDocument(_Doc_).getObject(Rev).ViewObject.PointColor)
        App.getDocument(_Doc_).getObject(Rev).ViewObject.Transparency=getattr(App.getDocument(_Doc_).getObject(new_val).getLinkedObject(True).ViewObject,'Transparency',App.getDocument(_Doc_).getObject(Rev).ViewObject.Transparency)
        App.getDocument(_Doc_).getObject(Rev).ViewObject.DisplayMode=getattr(App.getDocument(_Doc_).getObject(new_val).getLinkedObject(True).ViewObject,'DisplayMode',App.getDocument(_Doc_).getObject(Rev).ViewObject.DisplayMode)
        App.getDocument(_Doc_).getObject(Rev).Angle = 360.000000
        App.getDocument(_Doc_).getObject(Rev).ReferenceAxis = (App.getDocument(_Doc_).getObject(sketch_name), ['V_Axis'])
        App.getDocument(_Doc_).getObject(Rev).Midplane = 0
        App.getDocument(_Doc_).getObject(Rev).Reversed = 0
        # If the selected primer is 'Berdan' the process will be:
        #   - Creation of sketch with holes
        #   - Creation of Pocket 
        #   - Rename all the sketches avoiding same-label-issues with other objects
        #   - Render the final object
        if check_list[1] == 1:
            # creating temporary variables
            holes = 'Hole_'+str(x)
            pocket = 'Pocket_'+str(x)
            #mirror =  'Mirror'
            # Process for berdan-like holes creation.
            # That's not perfect so it have to be postprocessed
            App.getDocument(_Doc_).getObject(new_val).newObject('Sketcher::SketchObject',holes)
            XY= [o.Label for o in obj.Origin.OriginFeatures if o.Role == 'XY_Plane'][0]
            App.getDocument(_Doc_).getObject(holes).Support= (App.getDocument(_Doc_).getObject(XY),[''])
            App.getDocument(_Doc_).getObject(holes).addGeometry(Part.Circle(App.Vector(1.5,0,0),App.Vector(0,0,1),0.5),False)
            App.getDocument(_Doc_).getObject(holes).addConstraint(Sketcher.Constraint('PointOnObject',0,3,-1)) 
            App.getDocument(_Doc_).getObject(holes).addGeometry(Part.Circle(App.Vector(-1.5,0,0),App.Vector(0,0,1),0.5),False)
            App.getDocument(_Doc_).getObject(holes).addConstraint(Sketcher.Constraint('PointOnObject',1,3,-1)) 
            App.getDocument(_Doc_).getObject(holes).MapMode = 'FlatFace'
            App.getDocument(_Doc_).getObject(new_val).newObject('PartDesign::Pocket',pocket)
            App.getDocument(_Doc_).getObject(pocket).Profile = App.getDocument(_Doc_).getObject(holes)
            App.getDocument(_Doc_).getObject(pocket).Length = 15
            App.ActiveDocument.recompute()
            App.getDocument(_Doc_).getObject(pocket).ReferenceAxis = (App.getDocument(_Doc_).getObject(holes),['N_Axis'])
            App.getDocument(_Doc_).getObject(holes).Visibility = False
            App.ActiveDocument.recompute()
            App.getDocument(_Doc_).getObject(pocket).ViewObject.ShapeColor=getattr(App.getDocument(_Doc_).getObject(Rev).getLinkedObject(True).ViewObject,'ShapeColor',App.getDocument(_Doc_).getObject(pocket).ViewObject.ShapeColor)
            App.getDocument(_Doc_).getObject(pocket).ViewObject.LineColor=getattr(App.getDocument(_Doc_).getObject(Rev).getLinkedObject(True).ViewObject,'LineColor',App.getDocument(_Doc_).getObject(pocket).ViewObject.LineColor)
            App.getDocument(_Doc_).getObject(pocket).ViewObject.PointColor=getattr(App.getDocument(_Doc_).getObject(Rev).getLinkedObject(True).ViewObject,'PointColor',App.getDocument(_Doc_).getObject(pocket).ViewObject.PointColor)
            App.getDocument(_Doc_).getObject(pocket).ViewObject.Transparency=getattr(App.getDocument(_Doc_).getObject(Rev).getLinkedObject(True).ViewObject,'Transparency',App.getDocument(_Doc_).getObject(pocket).ViewObject.Transparency)
            App.getDocument(_Doc_).getObject(pocket).ViewObject.DisplayMode=getattr(App.getDocument(_Doc_).getObject(Rev).getLinkedObject(True).ViewObject,'DisplayMode',App.getDocument(_Doc_).getObject(pocket).ViewObject.DisplayMode)
            Gui.getDocument(_Doc_).setEdit(App.getDocument(_Doc_).getObject(new_val), 0, pocket+'.')
            Gui.Selection.clearSelection()                
            App.getDocument(_Doc_).getObject(pocket).UseCustomVector = 0
            App.getDocument(_Doc_).getObject(pocket).Direction = (0, 0, 1)
            App.getDocument(_Doc_).getObject(pocket).ReferenceAxis = (App.getDocument(_Doc_).getObject(holes), ['N_Axis'])
            App.getDocument(_Doc_).getObject(pocket).AlongSketchNormal = 1
            App.getDocument(_Doc_).getObject(pocket).Type = 1
            App.getDocument(_Doc_).getObject(pocket).UpToFace = None
            App.getDocument(_Doc_).getObject(pocket).Reversed = 0
            App.getDocument(_Doc_).getObject(pocket).Midplane = 1
            App.getDocument(_Doc_).getObject(pocket).Offset = 0
            App.getDocument(_Doc_).recompute()
            App.getDocument(_Doc_).getObject(Rev).Visibility = False
            Gui.getDocument(_Doc_).resetEdit()
            #App.getDocument(_Doc_).getObject(holes).Visibility = True
            # This part contain the script for mirroring the pocket (useless after have corrected the pocket)
            #App.getDocument(_Doc_).getObject(new_val).newObject('PartDesign::Mirrored',mirror)
            #App.getDocument(_Doc_).getObject(mirror).MirrorPlane = (App.getDocument(_Doc_).getObject(holes), ['V_Axis'])
            #App.getDocument(_Doc_).getObject(mirror).ViewObject.ShapeColor=getattr(App.getDocument(_Doc_).getObject(pocket).getLinkedObject(True).ViewObject,'ShapeColor',App.getDocument(_Doc_).getObject(pocket).ViewObject.ShapeColor)
            #App.getDocument(_Doc_).getObject(mirror).ViewObject.LineColor=getattr(App.getDocument(_Doc_).getObject(pocket).getLinkedObject(True).ViewObject,'LineColor',App.getDocument(_Doc_).getObject(pocket).ViewObject.LineColor)
            #App.getDocument(_Doc_).getObject(mirror).ViewObject.PointColor=getattr(App.getDocument(_Doc_).getObject(pocket).getLinkedObject(True).ViewObject,'PointColor',App.getDocument(_Doc_).getObject(pocket).ViewObject.PointColor)
            #App.getDocument(_Doc_).getObject(mirror).ViewObject.Transparency=getattr(App.getDocument(_Doc_).getObject(pocket).getLinkedObject(True).ViewObject,'Transparency',App.getDocument(_Doc_).getObject(pocket).ViewObject.Transparency)
            #App.getDocument(_Doc_).getObject(mirror).ViewObject.DisplayMode=getattr(App.getDocument(_Doc_).getObject(pocket).getLinkedObject(True).ViewObject,'DisplayMode',App.getDocument(_Doc_).getObject(pocket).ViewObject.DisplayMode)
            #Gui.getDocument(_Doc_).setEdit(App.getDocument(_Doc_).getObject(new_val), 0, mirror+'.')
            Gui.Selection.clearSelection()
            #App.getDocument(_Doc_).getObject(new_val).Tip = App.getDocument(_Doc_).getObject(mirror)
            #FreeCAD.getDocument(_Doc_).getObject(mirror).Originals = FreeCAD.getDocument(_Doc_).getObject(pocket)
            App.getDocument(_Doc_).getObject(pocket).Visibility = True
            #App.getDocument(_Doc_).getObject(mirror).Visibility = True
            App.getDocument(_Doc_).getObject(holes).Label = V_list[0]+'_hole'
            App.getDocument(_Doc_).getObject(pocket).Label = V_list[0]+'_pocket'
            #App.getDocument(_Doc_).getObject(mirror).Label = V_list[0]+'_mirror'
            App.ActiveDocument.recompute()
            Gui.getDocument(_Doc_).resetEdit()
        else:
             App.getDocument(_Doc_).getObject(Rev).Visibility = True
        Gui.activateView('Gui::View3DInventor', True) 
        #Gui.getDocument(_Doc_).resetEdit()
        App.getDocument(_Doc_).getObject(sketch_name).Visibility = False
        # Golden color
        Gui.ActiveDocument.ActiveObject.ShapeColor=(0.7803999781608582, 0.5685999989509583, 0.1137000024318695, 0.0)            # Gold color        
        Gui.ActiveDocument.ActiveObject.LineColor = (0.09803921729326248, 0.09803921729326248, 0.09803921729326248, 0.0)   # LineColor  
        Gui.ActiveDocument.ActiveObject.DiffuseColor = (0.7803999781608582, 0.5685999989509583, 0.1137000024318695, 0.0)# DiffuseColor       
        Gui.ActiveDocument.ActiveObject.ShapeMaterial.SpecularColor = (0.8,0.8,0.8)
        FreeCAD.ActiveDocument.recompute()    
        Gui.getDocument(_Doc_).resetEdit()
        # Shaded view
        Gui.runCommand('Std_DrawStyle',5)  
        x+=1
    except Exception as e:
        tk.messagebox.showerror('Error while creating 3D object, control the sketch!\n', str(e))
    App.getDocument(_Doc_).getObject(new_val).Label = V_list[0]
    App.getDocument(_Doc_).getObject(sketch_name).Label = V_list[0]+'_sketch'
    App.getDocument(_Doc_).getObject(Rev).Label = V_list[0]+'_revolution'
    if FCon == 0:
        App.getDocument(_Doc_).getObject(new_val).removeObjectsFromDocument()
        App.getDocument(_Doc_).removeObject(new_val)  
        win.destroy()
    Create.config(state='disabled')

# [END FREECAD PART]**************************************************************************************************************
def changeclass(class_, value):
    global Frame2, prev_Frame, classe
    check_list[3] = value
    if class_ != None:
        Frame2.destroy()
        _class_=class_.build(class_(), tk.Frame(win))
        prev_Frame = _class_
        Frame2 = _class_
    else:
        Frame2 = prev_Frame
    build()
#B1 = tk.Button(win, text='Premi', command=lambda: (self.V1.config(state='disabled') if self.V1['state'] == 'normal' else self.V1.config(state='normal')))
B1 = tk.Button(Frame, text='Bottleneck', background='#038',foreground='#fff',command=lambda: changeclass(Bottleneck,0), relief=tk.FLAT)
B2 = tk.Button(Frame, text='Belted', background='#038',foreground='#fff',command=lambda: changeclass(Belted,1), relief=tk.FLAT)
B4 = tk.Button(Frame, text='Rimmed', background='#038',foreground='#fff',command=lambda: changeclass(Rim_Bottleneck,2), relief=tk.FLAT)
B3 = tk.Button(Frame, text='Straight', background='#083',foreground='#fff',command=lambda: changeclass(Straight,3) , relief=tk.FLAT )
B5 = tk.Button(Frame, text='Belted', background='#083',foreground='#fff',command=lambda: changeclass(B_Straight,4), relief=tk.FLAT )
B6 = tk.Button(Frame, text='Rimmed', background='#083',foreground='#fff',command=lambda: changeclass(Rim_Straight,5), relief=tk.FLAT)
O1 = tk.Checkbutton(Frame_, text='Large',relief=tk.FLAT, command=lambda: [O2.deselect(), O3.deselect(), check_list.pop(0), check_list.insert(0,2)])
O2 = tk.Checkbutton(Frame_, text='Small',relief=tk.FLAT, command=lambda: [O1.deselect(), O3.deselect(),check_list.pop(0), check_list.insert(0,1)])
O3 = tk.Checkbutton(Frame_, text='Rimfire', command= lambda: [[tk.messagebox.showerror('Error', 'Cannot be rimfire'), check_list.pop(0), check_list.insert(0,0),  O3.deselect()]
    if (check_list[3] == 0) or (check_list[3] == 1) or (check_list[3] == 3) or (check_list[3] == 4) else [check_list.pop(0), check_list.insert(0,3), check_list.pop(1), check_list.insert(1,-1),],  O1.deselect(),O2.deselect(), O4.deselect(), O5.deselect()],relief=tk.FLAT)
O4 = tk.Checkbutton(Frame_, text='Boxer',command=lambda: [check_list.pop(1), check_list.insert(1,0), O5.deselect()],relief=tk.FLAT)
O5 = tk.Checkbutton(Frame_, text='Berdan',command=lambda: [check_list.pop(1), check_list.insert(1,1), O4.deselect()],relief=tk.FLAT)

Frame.grid(row=1,column=0, pady=5,sticky=tk.NW)#ttk.Separator(win, orient= 'horizontal').grid(row=3,column=0,sticky=tk.EW)
Frame_.grid(row=2, column=0,  sticky=tk.NW)
N = tk.StringVar()
N.set('Name')
Name = tk.Entry(win, textvariable=N,relief=tk.SUNKEN)
Name.grid(row=3, column=0, sticky=tk.NW)
Create = tk.Button(win, text='Create!', background='#000079' if FCon == 1 else '#790000', foreground='#fff', command= lambda : create_obj(), relief=tk.FLAT, state= 'disabled')
Create.grid(row=4,column=0,sticky=tk.NSEW)
B1.grid(row=0,column=0,sticky=tk.EW,padx=2)
B2.grid(row=1,column=0,sticky=tk.EW,padx=2)
B4.grid(row=2,column=0,sticky=tk.EW,padx=2)
B3.grid(row=0,column=1,sticky=tk.EW)
B5.grid(row=1, column=1,sticky=tk.EW)
B6.grid(row=2, column=1,sticky=tk.EW)
O1.grid(row=0,column=0,sticky=tk.EW)
O2.grid(row=2,column=0,sticky=tk.EW)
O3.grid(row=3,column=0,sticky=tk.EW)
O4.grid(row=0,column=1,sticky=tk.EW)
O5.grid(row=1,column=1,sticky=tk.EW)
tk.Label(win, text=f'Ver. {__Version__}', background='#fff').grid(row=8, column=0, sticky=tk.W)
tk.Label(win, text=os.getcwd(), background='#fff').grid(row=9, column=0, sticky=tk.W)
O2.select(); O4.select()
changeclass(Bottleneck,0)



if '__main__' == __name__:
    win.mainloop()
    # app = App()
    # app.mainloop()
